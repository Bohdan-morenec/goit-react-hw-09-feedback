{"version":3,"sources":["components/statististics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","options/Notification.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","value","onClick","uuidv4","a","message","Section","useState","setGood","setNeutral","setBad","countTotalFeedback","name","console","log","Math","trunc","Notification","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA2BeA,EAzBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,8BACE,+BACE,uCACO,+BAAOJ,OAEd,0CACU,+BAAOC,OAEjB,sCACM,+BAAOC,OAEb,wCACQ,+BAAOC,OAEf,oDAEGC,EAFH,a,QCfKC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAuBC,QAASH,EAAgBE,GAAhD,SACGA,GADUE,qBCGNC,EARL,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACX,OAAO,8BAAMA,KCmDAC,EAjDC,WACd,MAAwBC,mBAAS,GAAjC,mBAAOf,EAAP,KAAagB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOd,EAAP,KAAgBgB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOb,EAAP,KAAYgB,EAAZ,KAqBMC,EAAqB,kBAAMnB,EAAOC,EAAUC,GAElD,OACE,oCACE,uDACA,cAAC,EAAD,CACEI,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA1Be,SAACa,GAAD,OAAU,WAC7B,OAAQA,GACN,IAAK,OACHJ,EAAQhB,EAAO,GACf,MACF,IAAK,UACHiB,EAAWhB,EAAU,GACrB,MACF,IAAK,MACHiB,EAAOhB,EAAM,GACb,MACF,QACEmB,QAAQC,IAAI,cAgBd,4CAC0B,IAAzBH,IACC,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,IACPf,mBAlBNmB,KAAKC,MAAO,IAAMxB,EAAQmB,OAqBtB,cAACM,EAAD,CAAcZ,QAAQ,0BCrCfa,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.20306f54.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>\r\n          Good <span>{good}</span>\r\n        </li>\r\n        <li>\r\n          Neutral <span>{neutral}</span>\r\n        </li>\r\n        <li>\r\n          Bad <span>{bad}</span>\r\n        </li>\r\n        <li>\r\n          total <span>{total}</span>\r\n        </li>\r\n        <li>\r\n          Positive feedback:\r\n          {positivePercentage}%\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map((value) => (\r\n        <button key={uuidv4()} onClick={onLeaveFeedback(value)}>\r\n          {value}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst a = ({ message }) => {\r\n  return <div>{message}</div>;\r\n};\r\n\r\na.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default a;\r\n","import { useState } from \"react\";\r\nimport Statistics from \"../statististics\";\r\nimport { FeedbackOptions } from \"../FeedbackOptions\";\r\nimport Notification from \"../../options/Notification\";\r\n\r\nconst Section = () => {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const eventСatcher = (name) => () => {\r\n    switch (name) {\r\n      case \"good\":\r\n        setGood(good + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral(neutral + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad(bad + 1);\r\n        break;\r\n      default:\r\n        console.log(\"error\");\r\n    }\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () =>\r\n    Math.trunc((100 * good) / countTotalFeedback());\r\n\r\n  const countTotalFeedback = () => good + neutral + bad;\r\n\r\n  return (\r\n    <section>\r\n      <h1>Please leave feedback</h1>\r\n      <FeedbackOptions\r\n        options={[\"good\", \"neutral\", \"bad\"]}\r\n        onLeaveFeedback={eventСatcher}\r\n      ></FeedbackOptions>\r\n      <h2>Statistics</h2>\r\n      {countTotalFeedback() !== 0 ? (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback()}\r\n          positivePercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\"></Notification>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import \"./App.css\";\nimport Section from \"./components/Section\";\n\nfunction App() {\n  return (\n    <div>\n      <Section />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}